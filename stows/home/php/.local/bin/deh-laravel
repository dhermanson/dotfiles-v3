#! /usr/bin/env ruby

require 'rubygems'
require 'commander/import'
require 'dotenv'

program :name, 'Laravel Helpers'
program :version, '1.0.0'
program :description, 'My laravel helper utilities'

command :dbcreate do |c|
  c.syntax = 'deh-laravel dbcreate'
  c.description = 'Create the database from the .env file'
  c.option '--env-file STRING', String, 'Specify the env file'
  c.action do |args, options|
    options.default \
      :env_file => ".env"

    d = load_env options.env_file
    create_database d

  end
end

command :dbdrop do |c|
  c.syntax = 'deh-laravel dbdrop'
  c.description = 'Drop the database from the .env file'
  c.option '--env-file STRING', String, 'Specify the env file'
  c.action do |args, options|
    options.default \
      :env_file => ".env"

    d = load_env options.env_file
    drop_database d

  end
end

command :dbopen do |c|
  c.syntax = 'deh-laravel dbopen'
  c.description = 'Open the database from the .env file'
  c.option '--env-file STRING', String, 'Specify the env file'
  c.action do |args, options|
    options.default \
      :env_file => ".env"

    d = load_env options.env_file
    open_database d

  end
end

command :dbschema do |c|
  c.syntax = 'deh-laravel dbopen'
  c.description = 'Run schemaspy against the database specified in the .env file'
  c.option '--env-file STRING', String, 'Specify the env file'
  c.action do |args, options|
    options.default \
      :env_file => ".env"

    d = load_env options.env_file

    run_schemaspy d
  end
end

def load_env env_file
  if !File.exists? env_file
    puts "#{ env_file } does not exist"
    exit 1
  end

  Dotenv.load env_file
  {
    db: ENV['DB_DATABASE'],
    user: ENV['DB_USERNAME'],
    pass: ENV['DB_PASSWORD'],
    host: '127.0.0.1',
    port: ENV['DB_PORT']
  }
end

def run_schemaspy d
  require 'fileutils'
  require 'pathname'

  project_dir = `git rev-parse --show-toplevel`.strip
  directory = File.join(project_dir, '.derick/schema')
  FileUtils.mkdir_p directory
  unless d[:db].nil? and d[:user].nil? and d[:pass].nil? and directory.nil?
    cmd = %Q( deh-schemaspy #{directory} #{d[:db]} #{d[:user]} #{d[:pass]} )
    result = `#{cmd}`
    puts result
  end
end

def create_database d
  unless d[:user].nil? and d[:pass].nil?
    if d[:db].nil?
      puts "No database configured"
    else
      create = %Q( mysql -h #{d[:host]} -P #{d[:port]} -u #{d[:user]} --password=#{d[:pass]} -e 'create database `#{d[:db]}` character set utf8mb4 collate utf8mb4_unicode_ci')
      grant = %Q( mysql -h #{d[:host]} -P #{d[:port]} -u #{d[:user]} --password=#{d[:pass]} -e 'grant all on `#{d[:db]}`.`*` to `#{d[:user]}`@`%`' )
      system create
      system grant
    end

  end
end

def drop_database d
  unless d[:user].nil? and d[:pass].nil?
    if d[:db].nil?
      puts "No database configured"
    else
      drop = %Q( mysql -h #{d[:host]} -P #{d[:port]} -u #{d[:user]} --password=#{d[:pass]} -e 'drop database `#{d[:db]}`')
      system drop
    end

  end
end

def open_database d
  unless d[:user].nil? and d[:pass].nil?
    if d[:db].nil?
      puts "No database configured"
    else
      open = %Q( mycli -h #{d[:host]} -P #{d[:port]} -u #{d[:user]} --password=#{d[:pass]} -D '#{d[:db]}')
      system open
    end

  end
end
