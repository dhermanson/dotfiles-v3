--langdef=snippets
--langmap=snippets:.snippets
--regex-snippets=/^snippet (.*)/\1/s,snippet/

#--langmap=PHP:.php
#--regex-php=/^[ \t]*trait[ \t]+([a-zA-Z0-9_]+)/\1/t,trait/
#--regex-php=/^[ \t]*((final|abstract)[ \t]+)*class[ \t]+([a-zA-Z0-9_]+)/\3/z,class/
#--regex-php=/^[ \t]*((static|abstract|public|protected|private)[ \t]+)*function[ \t]+(\&\s+)?([^ (]+)/\4/x,function/
#--regex-php=/^[ \t]*((static|abstract|public|protected|private)[ \t]+)*function[ \t]+test(\&\s+)?([^ (]+)/\4/u,testMethod/
#--regex-php=/^[ \t]*interface[ \t]+([a-zA-Z0-9_]+)/\1/y,interface/
#--regex-php=/^[ \t]*const[ \t]+([a-zA-Z0-9_]+)/const.\1/w,constant/
#--regex-php=/^[ \t]*\*[ \t]*@property(\-read|\-write)*[ \t]+[a-zA-Z0-9_]+[ \t]+\$([a-zA-Z0-9_]+)/\2/p,property/
#--regex-php=/^[ \t]*\*[ \t]*@property(\-read|\-write)*[ \t]+static[ \t]+[a-zA-Z0-9_]+[ \t]+\$([a-zA-Z0-9_]+)/\2/r,static property/
#--regex-php=/^[ \t]*\*[ \t]*@method[ \t]+[a-zA-Z0-9_]+[ \t]+([a-zA-Z0-9_]+())/\1/m,method/
#--regex-php=/^[ \t]*\*[ \t]*@method[ \t]+static[ \t]+[a-zA-Z0-9_]+[ \t]+([a-zA-Z0-9_]+)/\1/s,static method/

--langdef=groovy
--langmap=groovy:.groovy
--regex-groovy=/^[ \t]*[(private|public|protected) ( \t)]*def[ \t]+([A-Za-z0-9_]+)[ \t]*\(/\1/f,function,functions/
--regex-groovy=/^[ \t]*private def[ \t]+([A-Za-z0-9_]+)[ \t]*/\1/v,private,private variables/
--regex-groovy=/^[ \t]*public def[ \t]+([A-Za-z0-9_]+)[ \t]*/\1/u,public,public variables/
--regex-groovy=/^[ \t]*[abstract ( \t)]*[(private|public) ( \t)]*class[ \t]+([A-Za-z0-9_]+)[ \t]*/\1/c,class,classes/
--regex-groovy=/^[ \t]*[abstract ( \t)]*[(private|public) ( \t)]*enum[ \t]+([A-Za-z0-9_]+)[ \t]*/\1/c,class,classes/

# --langdef=Groovy
# --langmap=Groovy:.groovy
# --regex-Groovy=/^\s*package\s+([a-zA-Z0-9.-_]+)/\1/p,package/
# --regex-Groovy=/^\s*(abstract)?\s*(private|public)?\s*class\s+([A-Za-z0-9_]+)\s+/\3/c,class/
# --regex-Groovy=/^\s*(def|String|void)\s+([a-zA-Z0-9_]+\([A-Za-z0-9 _]*\))\s+/\2/m,method/
# --regex-Groovy=/^\s*(def|String|File)\s+([a-zA-Z0-9_]+)$/\2/f,field/
# --regex-Groovy=/^\s*(def|String|File)\s+([a-zA-Z0-9_]+)\s+=/\2/f,field/



--langdef=vb
--langmap=vb:.vb
--regex-vb=/^[ \t]*(Public|Private)?[ \t]*Sub[ \t]+([a-zA-Z0-9_]+)/\2/s,subroutine/i
--regex-vb=/^[ \t]*(Public|Private)?[ \t]*Function[ \t]+([a-zA-Z0-9_]+)/\2/f,function/i

# Regex for Kotlin
--langdef=kotlin
--langmap=kotlin:+.kt
--langmap=kotlin:+.kts
--regex-kotlin=/^[[:space:]]*((abstract|final|sealed|implicit|lazy|inner|open)[[:space:]]*)*(private[^ ]*|protected)?[[:space:]]*class[[:space:]]+([[:alnum:]_:]+)/\4/c,classes/
--regex-kotlin=/^[[:space:]]*((abstract|final|sealed|implicit|lazy)[[:space:]]*)*(private[^ ]*|protected)?[[:space:]]*object[[:space:]]+([[:alnum:]_:]+)/\4/o,objects/
--regex-kotlin=/^[[:space:]]*((abstract|final|sealed|implicit|lazy|open)[[:space:]]*)*(private[^ ]*|protected)?[[:space:]]*((abstract|final|sealed|implicit|lazy)[[:space:]]*)*data class[[:space:]]+([[:alnum:]_:]+)/\6/d,data classes/
--regex-kotlin=/^[[:space:]]*((abstract|final|sealed|implicit|lazy)[[:space:]]*)*(private[^ ]*|protected)?[[:space:]]*interface[[:space:]]+([[:alnum:]_:]+)/\4/i,interfaces/
--regex-kotlin=/^[[:space:]]*type[[:space:]]+([[:alnum:]_:]+)/\1/T,types/
--regex-kotlin=/^[[:space:]]*((abstract|final|sealed|implicit|lazy|override|open|private[^ ]*(\[[a-z]*\])*|protected)[[:space:]]*)*fun[[:space:]]+([[:alnum:]_:]+)/\4/m,methods/
--regex-kotlin=/^[[:space:]]*((abstract|final|sealed|implicit|lazy|override|private[^ ]*|protected)[[:space:]]*)*(const[[:space:]])*val[[:space:]]+([[:alnum:]_]+)/\4/C,constants/
--regex-kotlin=/^[[:space:]]*((abstract|final|sealed|implicit|lazy|override|private[^ ]*|protected)[[:space:]]*)*(lateinit[[:space:]]*)*var[[:space:]]+([[:alnum:]_]+)/\4/v,variables/
--regex-kotlin=/^[[:space:]]*package[[:space:]]+([[:alnum:]_.:]+)/\1/p,packages/
--regex-kotlin=/^[[:space:]]*import[[:space:]]+([[:alnum:]_.:]+)/\1/I,imports/
